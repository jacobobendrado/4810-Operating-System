- ## keyboard input
	- ### Resources:
		- [PageKey keyboard interrupt tutorial](https://youtu.be/YtnNX074jMU?si=A4l4b3DDajtNyhbD)
	- ### IDT
		- a table mapping interrupt code with a pointer of instructions to execute (called an ISR “interrupt service routine”)
		- #### in real mode
			- the interrupt table is called IVT (vector table) and always resides in memory from 0x0000..0x03FF (dec 255) and contains 256 far pointers to ISRs.
		- #### in protected mode
			- stored consecutively in memory and indexed by vector number.
				- it is not necessary to use all possible entires.
				- if fewer are used, the length must be set properly.
			- there is a register called the IDTR (literally stands for IDT register). this stores the (1) linear base address *(not the physical address)* and (2) length in bytes minus 1
			- when an interrupt occurs, the CPU multiplies the interrupt vector by the entry size (8 for protected, 16 for long) and adds the result to the base address.
	- ### port mapped I/O
		- a method of interfacing with hardware as though it were memory. certain addresses will be reserved separate from main memory.
		- we can use the`in`instruction to read data **from** an IO port and `out` to **send** data to a port.
		- each IO device is assigned a unique port number allowing the CPU to communicate with it directly.
		- 0x60 is the **keyboard data port** by which we can read the value of a keypress when one is ready
		- 0x64 is the **keyboard status port** and stores whether or not a keypress is stored in the data port
		-
		  ```
		  in al, 0x60 	; read a byte from port 0x60 into al
		  out 0x60, al	; write the byte in al to port 0x60
		  
		  ; sample (may or may not work)
		  check_keypress:
		  	in al, 0x64			; read status into register al
		  	test al, 1			; check if the a keypress is ready to be read
		  	jz check_keypress	; loop if not (realistically exit here.)
		      
		      in al, 0x60 		; read keypress
		      call c_function 	; switch back to high level code here 
		      					; al currently contains the scancode
		  ```
	- ### [OFFICIAL INTEL LAYOUT](https://en.wikipedia.org/wiki/Interrupt_descriptor_table#Common_IDT_layouts)
		- Intel has a suggested mapping of interrupts and meanings. and by suggested, i mean the first 32 are reserved by intel, don’t use ‘em.
		-
		  | INT_NUM | Event Type | Short Description |
		  |---|---|---|
		  | 0x00 | Processor Exception | [Division by zero](https://en.wikipedia.org/wiki/Division_by_zero#Computer_arithmetic) |
		  | 0x01 | Processor Exception | Single-step interrupt (see [trap flag](https://en.wikipedia.org/wiki/Trap_flag)) |
		  | 0x02 | Processor Exception | [NMI](https://en.wikipedia.org/wiki/Non-maskable_interrupt) |
		  | 0x03 | Processor Exception | Breakpoint (which benefits from the shorter 0xCC encoding of INT 3) |
		  | 0x04 | Processor Exception | Overflow |
		  | 0x05 | Processor Exception | Bound Range Exceeded |
		  | 0x06 | Processor Exception | Invalid Opcode |
		  | 0x07 | Processor Exception | Coprocessor not available |
		  | 0x08 | Processor Exception | [Double Fault](https://en.wikipedia.org/wiki/Double_fault) |
		  | 0x09 | Processor Exception | Coprocessor Segment Overrun *(386 or earlier only)* |
		  | 0x0A | Processor Exception | Invalid Task State Segment |
		  | 0x0B | Processor Exception | Segment not present |
		  | 0x0C | Processor Exception | Stack Segment Fault |
		  | 0x0D | Processor Exception | [General Protection Fault](https://en.wikipedia.org/wiki/General_protection_fault) |
		  | 0x0E | Processor Exception | [Page Fault](https://en.wikipedia.org/wiki/Page_fault) |
		  | 0x0F | Processor Exception | *reserved* |
		  | 0x10 | Processor Exception | x87 Floating Point Exception |
		  | 0x11 | Processor Exception | Alignment Check |
		  | 0x12 | Processor Exception | Machine Check |
		  | 0x13 | Processor Exception | [SIMD](https://en.wikipedia.org/wiki/SIMD) Floating-Point Exception |
		  | 0x14 | Processor Exception | Virtualization Exception |
		  | 0x15 | Processor Exception | Control Protection Exception (only available with [CET](https://en.wikipedia.org/wiki/Control-flow_enforcement_technology)) |
		  | 0x16-0x1F | Processor Exception | *reserved* |
		  | 0x20-0x27 | Hardware Interrupt | IRQ 0-7 |
		  | 0x70-0x77 | Hardware Interrupt | IRQ 8-15 |
		-